diff --git a/node_modules/mpv.js/index.js b/node_modules/mpv.js/index.js
index f67ceaa..209ac5e 100644
--- a/node_modules/mpv.js/index.js
+++ b/node_modules/mpv.js/index.js
@@ -5,14 +5,13 @@
 
 "use strict";
 
-const path = require("path");
 const React = require("react");
 const PropTypes = require("prop-types");
 
 /**
  * The MIME type associated with mpv.js plugin.
  */
-const PLUGIN_MIME_TYPE = "application/x-mpvjs";
+const PLUGIN_MIME_TYPE = "application/x-ppapi-tests";
 
 function containsNonASCII(str) {
   for (let i = 0; i < str.length; i++) {
@@ -31,6 +30,7 @@ function containsNonASCII(str) {
  * @throws {Error} Resulting path contains non-ASCII characters.
  */
 function getPluginEntry(pluginDir, pluginName = "mpvjs.node") {
+  const path = require("path");
   const fullPluginPath = path.join(pluginDir, pluginName);
   // Try relative path to workaround ASCII-only path restriction.
   let pluginPath = path.relative(process.cwd(), fullPluginPath);
@@ -60,6 +60,7 @@ function getPluginEntry(pluginDir, pluginName = "mpvjs.node") {
  * React wrapper.
  */
 class ReactMPV extends React.PureComponent {
+  pluginRef = React.createRef();
   /**
    * Send a command to the player.
    *
@@ -148,7 +149,7 @@ class ReactMPV extends React.PureComponent {
    * @return {HTMLEmbedElement}
    */
   node() {
-    return this.refs.plugin;
+    return this.pluginRef.current;
   }
 
   _postData(type, data) {
@@ -171,7 +172,7 @@ class ReactMPV extends React.PureComponent {
   render() {
     const defaultStyle = {display: "block", width: "100%", height: "100%"};
     const props = Object.assign({}, this.props, {
-      ref: "plugin",
+      ref: this.pluginRef,
       type: PLUGIN_MIME_TYPE,
       style: Object.assign(defaultStyle, this.props.style),
     });
